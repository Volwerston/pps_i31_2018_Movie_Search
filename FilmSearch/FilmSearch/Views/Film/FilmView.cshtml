@model FilmViewModel

@{
    Layout = "_Layout";
    ViewData["Title"] = Model.Film.Title;
}
<style>
    textarea {
        min-height: 100px;
        overflow-y: auto;
        word-wrap:break-word
    }
</style>
<div class="row">
    <div class="col-sm-3">
        <img src="@(Model.Film.Photo?.Path ??
                    "https://www.mearto.com/assets/no-image-83a2b680abc7af87cfff7777d0756fadb9f9aecd5ebda5d34f8139668e0fc842.png")"
             alt="@Model.Film.Title" 
             style="width: 200px; height: 400px"/>
        @if (User.Identity.IsAuthenticated)
        {
            <div class="container">
                <p class="row"> Your score: </p>
                <div class="row lead">
                    <div id="stars-existing" class="starrr" data-rating="@(Model.FilmPerformance?.Performance)"></div>
                </div>
            </div>
            <div class="container row">
                <button type="button" class="btn btn-danger btn-cons" onclick="deleteFilm(this)">Delete</button>
            </div>
        }
        
    </div>
    <div class="col-sm-9">
        <form>
            <div id="allValidation" class="text-danger"></div>
            <div class="form-group">
                <h2>@Model.Film.Title</h2>
                <span id="titleValidation" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Release Date</label>
                <input disabled="disabled" type="date" class="form-control" data-provider="datepicker" id="releaseDate"/>
                <span id="releaseDateValidation" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Director</label>
                <select disabled="disabled" class="personsSelect form-control" id="directorSelect">
                    <option>@Model.Film.Director.FullName</option>
                </select>
            </div>
            <div class="form-group">
                <label class="control-label">Actors</label>
                <select  disabled="disabled" multiple class="personsSelect form-control" id="actorsSelect">
                    @foreach (var actor in Model.Film.Actors ?? new List<Person>())
                    {
                        <option>@actor.FullName</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label class="control-label">Genres</label>
                <select  disabled="disabled" multiple class="form-control" id="genresSelect">
                    @foreach (var genre in Model.Film.Genres ?? new List<Genre>())
                    {
                        <option>@genre.Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label class="control-label">Score: </label>
                <span id="score">@Model.Film.Performance</span>
            </div>       
        </form>
        
    </div>
    
    <div class="col-xs-12">
        <div class="form-group">
            <label class="control-label">Short Description</label>
            <textarea onkeyup="adjustHeight(this)"  disabled="disabled" class="form-control" id="description">@Model.Film.ShortDescription</textarea>
            <span id="descriptionValidation" class="text-danger"></span>
        </div>
        
    </div>

    
</div>


@section Scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.1/js/select2.min.js"></script>
    <script src="~/js/utils.js"></script>
    <script>
        var id = (@Model.Film.Id);
        
        document.getElementById("releaseDate").value = convertFromDefaultDateFormat("@Model.Film.ReleaseDate");
        
        function adjustHeight(el) {
            el.style.height = (el.scrollHeight > el.clientHeight) ? (el.scrollHeight + 50)+"px" : "100px";
        }
        
        function deleteFilm(el) {
            $.ajax({
                    type: 'DELETE',
                    url: "http://localhost:5000/api/film/" + id,
                    success: data => {
                        window.location.href = "http://localhost:5000/Film/ShowFilmViews";
                    },
                    error: resp => {
                        document.getElementById("allValidation").innerHTML = "Failed to rate film";
                    }
                }
            );
        }
        
        //Rating
        
        // Starrr plugin (https://github.com/dobtco/starrr)
        var __slice = [].slice;
    
        (function($, window) {
            var Starrr;
    
            Starrr = (function() {
                Starrr.prototype.defaults = {
                    rating: void 0,
                    numStars: 10,
                    change: function(e, value) {}
                };
    
                function Starrr($el, options) {
                    var i, _, _ref,
                        _this = this;
    
                    this.options = $.extend({}, this.defaults, options);
                    this.$el = $el;
                    _ref = this.defaults;
                    for (i in _ref) {
                        _ = _ref[i];
                        if (this.$el.data(i) != null) {
                            this.options[i] = this.$el.data(i);
                        }
                    }
                    this.createStars();
                    this.syncRating();
                    this.$el.on('mouseover.starrr', 'span', function(e) {
                        return _this.syncRating(_this.$el.find('span').index(e.currentTarget) + 1);
                    });
                    this.$el.on('mouseout.starrr', function() {
                        return _this.syncRating();
                    });
                    this.$el.on('click.starrr', 'span', function(e) {
                        return _this.setRating(_this.$el.find('span').index(e.currentTarget) + 1);
                    });
                    this.$el.on('starrr:change', this.options.change);
                }
    
                Starrr.prototype.createStars = function() {
                    var _i, _ref, _results;
    
                    _results = [];
                    for (_i = 1, _ref = this.options.numStars; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--) {
                        _results.push(this.$el.append("<span class='glyphicon .glyphicon-star-empty'></span>"));
                    }
                    return _results;
                };
    
                Starrr.prototype.setRating = function(rating) {
                    if (this.options.rating === rating) {
                        rating = void 0;
                    }
                    this.options.rating = rating;
                    this.syncRating();
                    return this.$el.trigger('starrr:change', rating);
                };
    
                Starrr.prototype.syncRating = function(rating) {
                    var i, _i, _j, _ref;
    
                    rating || (rating = this.options.rating);
                    if (rating) {
                        for (i = _i = 0, _ref = rating - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
                            this.$el.find('span').eq(i).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
                        }
                    }
                    if (rating && rating < 10) {
                        for (i = _j = rating; rating <= 9 ? _j <= 9 : _j >= 9; i = rating <= 9 ? ++_j : --_j) {
                            this.$el.find('span').eq(i).removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                        }
                    }
                    if (!rating) {
                        return this.$el.find('span').removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                    }
                };
    
                return Starrr;
    
            })();
            return $.fn.extend({
                starrr: function() {
                    var args, option;
    
                    option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
                    return this.each(function() {
                        var data;
    
                        data = $(this).data('star-rating');
                        if (!data) {
                            $(this).data('star-rating', (data = new Starrr($(this), option)));
                        }
                        if (typeof option === 'string') {
                            return data[option].apply(data, args);
                        }
                    });
                }
            });
        })(window.jQuery, window);
    
        $(function() {
            return $(".starrr").starrr();
        });


        $(document).ready(function() {
            $('#stars-existing').on('starrr:change', function(e, value){
                $.ajax({
                        type: 'PUT',
                        url: "http://localhost:5000/api/film/rate/" + id + "?rate=" + value,
                        success: data => {
                            document.getElementById("score").innerHTML = data;
                        },
                        error: resp => {
                            document.getElementById("allValidation").innerHTML = "Failed to rate film";
                        }
                    }
                );
            });
        });
    </script>
}
